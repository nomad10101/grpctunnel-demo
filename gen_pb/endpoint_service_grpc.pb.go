// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: endpoint_service.proto

package grpctunnel_demo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HubServiceClient is the client API for HubService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HubServiceClient interface {
	CreateTcpListenerAndBlock(ctx context.Context, in *TcpListenRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type hubServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHubServiceClient(cc grpc.ClientConnInterface) HubServiceClient {
	return &hubServiceClient{cc}
}

func (c *hubServiceClient) CreateTcpListenerAndBlock(ctx context.Context, in *TcpListenRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/HubService/CreateTcpListenerAndBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HubServiceServer is the server API for HubService service.
// All implementations must embed UnimplementedHubServiceServer
// for forward compatibility
type HubServiceServer interface {
	CreateTcpListenerAndBlock(context.Context, *TcpListenRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedHubServiceServer()
}

// UnimplementedHubServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHubServiceServer struct {
}

func (UnimplementedHubServiceServer) CreateTcpListenerAndBlock(context.Context, *TcpListenRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTcpListenerAndBlock not implemented")
}
func (UnimplementedHubServiceServer) mustEmbedUnimplementedHubServiceServer() {}

// UnsafeHubServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HubServiceServer will
// result in compilation errors.
type UnsafeHubServiceServer interface {
	mustEmbedUnimplementedHubServiceServer()
}

func RegisterHubServiceServer(s grpc.ServiceRegistrar, srv HubServiceServer) {
	s.RegisterService(&HubService_ServiceDesc, srv)
}

func _HubService_CreateTcpListenerAndBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TcpListenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServiceServer).CreateTcpListenerAndBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HubService/CreateTcpListenerAndBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServiceServer).CreateTcpListenerAndBlock(ctx, req.(*TcpListenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HubService_ServiceDesc is the grpc.ServiceDesc for HubService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HubService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "HubService",
	HandlerType: (*HubServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTcpListenerAndBlock",
			Handler:    _HubService_CreateTcpListenerAndBlock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "endpoint_service.proto",
}

// EndpointServiceClient is the client API for EndpointService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EndpointServiceClient interface {
	DataPipe(ctx context.Context, opts ...grpc.CallOption) (EndpointService_DataPipeClient, error)
}

type endpointServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEndpointServiceClient(cc grpc.ClientConnInterface) EndpointServiceClient {
	return &endpointServiceClient{cc}
}

func (c *endpointServiceClient) DataPipe(ctx context.Context, opts ...grpc.CallOption) (EndpointService_DataPipeClient, error) {
	stream, err := c.cc.NewStream(ctx, &EndpointService_ServiceDesc.Streams[0], "/EndpointService/DataPipe", opts...)
	if err != nil {
		return nil, err
	}
	x := &endpointServiceDataPipeClient{stream}
	return x, nil
}

type EndpointService_DataPipeClient interface {
	Send(*HubMessage) error
	Recv() (*EndpointMessage, error)
	grpc.ClientStream
}

type endpointServiceDataPipeClient struct {
	grpc.ClientStream
}

func (x *endpointServiceDataPipeClient) Send(m *HubMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *endpointServiceDataPipeClient) Recv() (*EndpointMessage, error) {
	m := new(EndpointMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EndpointServiceServer is the server API for EndpointService service.
// All implementations must embed UnimplementedEndpointServiceServer
// for forward compatibility
type EndpointServiceServer interface {
	DataPipe(EndpointService_DataPipeServer) error
	mustEmbedUnimplementedEndpointServiceServer()
}

// UnimplementedEndpointServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEndpointServiceServer struct {
}

func (UnimplementedEndpointServiceServer) DataPipe(EndpointService_DataPipeServer) error {
	return status.Errorf(codes.Unimplemented, "method DataPipe not implemented")
}
func (UnimplementedEndpointServiceServer) mustEmbedUnimplementedEndpointServiceServer() {}

// UnsafeEndpointServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EndpointServiceServer will
// result in compilation errors.
type UnsafeEndpointServiceServer interface {
	mustEmbedUnimplementedEndpointServiceServer()
}

func RegisterEndpointServiceServer(s grpc.ServiceRegistrar, srv EndpointServiceServer) {
	s.RegisterService(&EndpointService_ServiceDesc, srv)
}

func _EndpointService_DataPipe_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EndpointServiceServer).DataPipe(&endpointServiceDataPipeServer{stream})
}

type EndpointService_DataPipeServer interface {
	Send(*EndpointMessage) error
	Recv() (*HubMessage, error)
	grpc.ServerStream
}

type endpointServiceDataPipeServer struct {
	grpc.ServerStream
}

func (x *endpointServiceDataPipeServer) Send(m *EndpointMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *endpointServiceDataPipeServer) Recv() (*HubMessage, error) {
	m := new(HubMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EndpointService_ServiceDesc is the grpc.ServiceDesc for EndpointService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EndpointService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "EndpointService",
	HandlerType: (*EndpointServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DataPipe",
			Handler:       _EndpointService_DataPipe_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "endpoint_service.proto",
}
